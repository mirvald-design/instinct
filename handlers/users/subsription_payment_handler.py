from functions.get_data_func import get_data_meetings
from keyboards.inline.calendar import SimpleCalendar, calendar_callback
from keyboards.inline.game_inline import game_keyboard
from keyboards.inline.payments_inline import payments_keyboard

import asyncio
from typing import Union

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from glQiwiApi import types as qiwi_types

from loader import wallet, dp, bot
from utils.db_api import db_commands


# TODO: –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
#  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é --> –≤—ã–±–∏—Ä–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ—é –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Å–æ–∑–¥–∞–ª –∞–¥–º–∏–Ω –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç
#  –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
async def create_payment(amount: Union[float, int] = 600) -> qiwi_types.Bill:
    async with wallet:
        return await wallet.create_p2p_bill(amount=amount)


@dp.callback_query_handler(text="pay_balance")
async def get_payment(call: CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.edit_text("<b>üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"
                                 "‚îú–ù–∞–≤—Å–µ–≥–¥–∞ 600\n"
                                 "‚îú–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \n<b>‚îúüîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã</b>\n"
                                 "‚îú–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç Qiwi –∏–ª–∏ –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç–∏—Ç—å —Å –ø–æ–º–æ—â—å—é ‚îú–∫–∏–≤–∏,"
                                 " –Ω–∞–ø–∏—à–∏—Ç–µ –∞–≥–µ–Ω—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
                                 reply_markup=await payments_keyboard())


@dp.callback_query_handler(text="check_price")
async def check_price(call: CallbackQuery):
    await bot.answer_callback_query(call.id, text="‚úîÔ∏è –¶–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞")


@dp.callback_query_handler(text='pay_qiwi')
async def payment(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    user_data = await get_data_meetings(call.from_user.id)
    user_premium = user_data[5]
    bill = await create_payment()
    keyboard = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=bill.pay_url)
    keyboard.add(btn1)
    btn2 = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='check_payment')
    keyboard.add(btn2)
    btn3 = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel_payment')
    keyboard.add(btn3)
    if user_premium is True:
        await bot.send_message(call.from_user.id, text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –î–æ—Å—Ç—É–ø —É–∂–µ –∫—É–ø–ª–µ–Ω :)")
        await asyncio.sleep(1)
        await bot.send_message(call.from_user.id, text=f"üëë –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å, {call.from_user.full_name}!\n\n"
                                                       f"üñ•Ô∏è –≠—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è <b>–æ–Ω–ª–∞–π–Ω —Ç–µ—Å—Ç–æ–≤</b> –Ω–∞ "
                                                       f"–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –†–§\n\n ",
                               reply_markup=await game_keyboard(user_premium))

    else:
        await bot.send_message(call.from_user.id, text=f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</b>\n"
                                                       f"–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∏–∂–µ",
                               reply_markup=keyboard)
        await state.set_state("payment")
        await state.update_data(bill=bill)


@dp.callback_query_handler(state="payment", text="check_payment")
async def successful_payment(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    keyboard = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='check_payment')
    keyboard.add(btn1)
    keyboard1 = types.ReplyKeyboardMarkup()
    async with state.proxy() as data:
        bill: qiwi_types.Bill = data.get("bill")
    status = await bill.check()
    if status:
        await call.message.edit_text("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        await db_commands.update_user_meetings_data(telegram_id=call.from_user.id, is_premium=True)
        await state.finish()
    else:
        await call.message.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç 10, –∞ –∑–∞—Ç–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                                  reply_markup=keyboard)


@dp.callback_query_handler(state='payment', text='cancel_payment')
async def cancel_payment(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    user_data = await get_data_meetings(call.from_user.id)
    user_premium = user_data[5]
    await call.message.reply(f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É :(\n', reply_markup=await game_keyboard(user_premium))
    await state.reset_state()


@dp.callback_query_handler(text="choice_the_date")
async def handled_purchase(call: CallbackQuery):
    await call.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É: ", reply_markup=await SimpleCalendar().start_calendar())


@dp.callback_query_handler(calendar_callback.filter())
async def process_simple_calendar(callback_query: CallbackQuery, callback_data):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        await callback_query.message.answer(
            f'You selected {date.strftime("%d/%m/%Y")}'
        )
